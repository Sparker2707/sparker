1...  open powershell (but not as admin)

wsl --list
cd
wsl --install -d Ubuntu-22.04     or for delete wsl use : wsl --unregister Ubuntu
cd ~
wsl -d Ubuntu-22.04


2... Install PX4 dependencies
cd ~
git clone https://github.com/PX4/PX4-Autopilot.git --recursive
bash ./PX4-Autopilot/Tools/setup/ubuntu.sh
exit
wsl --shutdown
wsl or open ubuntu
cd ~/PX4-Autopilot
sudo apt update
sudo apt install make
sudo apt install openjdk-11-jdk
sudo apt update
pip3 install kconfiglib
pip3 install --user empy
pip3 install --user pyros-genmsg
sudo apt update
sudo apt install python3 python3-pip python3-jinja2 python3-empy python3-toml \
                 python3-numpy python3-pandas python3-yaml gcc g++ make cmake \
                 git genromfs ninja-build protobuf-compiler
pip3 install symforce
pip3 install future
sudo apt install python3 python3-pip python3-venv git cmake build-essential genromfs ninja-build exiftool
sudo apt install openjdk-11-jdk
sudo apt install ant
sudo apt install protobuf-compiler libeigen3-dev libopencv-dev

3. Simulation Tools :----->>>
make px4_sitl jmavsim
sudo apt install nvidia-driver-510
sudo apt install gazebo
bash Tools/setup/ubuntu.sh
make px4_sitl gazebo
    {{ to have gazebo classic and gz :  sudo add-apt-repository ppa:openrobotics/gazebo11-gz-cli
sudo apt update
sudo apt-get install gazebo11
}}}}


4.... install QGC ---->>>>
cd
mkdir Qgroundcontrol
wget https://d176tv9ibo4jno.cloudfront.net/latest/QGroundControl.AppImage
chmod +x ./QGroundControl.AppImage
./QGroundControl.AppImage
sudo apt-get install fuse
sudo apt-get install -y libpulse-dev

if any error comes on qgc ::
#!/bin/bash
export LD_LIBRARY_PATH=/tmp/.mount_QGrounC7a6RB

5...   VSC 
code .
$ ip addr | grep eth0

6: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
    inet 172.18.46.131/20 brd 172.18.47.255 scope global eth0




7.  setting ros2 px4 ---->>>>>>


sudo apt update && sudo apt install locales
sudo locale-gen en_US en_US.UTF-8
sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
export LANG=en_US.UTF-8
sudo apt install software-properties-common
sudo add-apt-repository universe
sudo apt update && sudo apt install curl -y
sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
sudo apt update && sudo apt upgrade -y
sudo apt install ros-humble-desktop
sudo apt install ros-dev-tools
source /opt/ros/humble/setup.bash && echo "source /opt/ros/humble/setup.bash" >> .bashrc


8..SERVER FOR ROS
pip3 install --user -U empy pyros-genmsg setuptools
pip3 install kconfiglib
pip3 install --user jsonschema
pip3 install --user jinja2

git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
cd Micro-XRCE-DDS-Agent
mkdir build
cd build
cmake ..
make
sudo make install
sudo ldconfig /usr/local/lib/

9. Setting MAVSDK

pip3 install mavsdk
examples/takeoff_and_land.py
git clone https://github.com/mavlink/MAVSDK-Python --recursive
cd MAVSDK-Pythoncd proto/pb_plugins
pip3 install -r requirements.txt
cd ../..
pip3 install -r requirements.txt -r requirements-dev.txt
./other/tools/run_protoc.sh
export MAVSDK_SERVER_ARCH=x86_64
python3 setup.py build
pip3 install -e .
pip3 install -r requirements-docs.txt
make -C mavsdk html


10. Setting the mavsdk server 
wget https://github.com/mavlink/MAVSDK/releases/download/v2.12.6/mavsdk_server_musl_x86_64
pip3 install --upgrade mavsdk aiogrpc
chmod +x mavsdk_server_musl_x86_64
./mavsdk_server_musl_x86_64 -p 50051
change this connection in code 
drone = System(mavsdk_server_address='localhost', port=50051)


